(*
Mainscreen
==========

The mainscreen file holds functions and procedures that are used in the
Runescape lobby mainscreen.

The source for this file can be found `here <https://github.com/SRL/SRL-6/blob/master/lib/interfaces/mainscreen.simba>`_.

*)

{$f-}

(*
const Angle
~~~~~~~~~~~

Constants that represent the possible angles of the mainscreen.

Example:

.. code-block:: pascal

    mainscreen.setAngle(MS_ANGLE_HIGH);
*)
const
  MS_ANGLE_HIGH  = 0;
  MS_ANGLE_LOW   = 1;
  MS_ANGLE_NONE  = 2;

(*
type TRSMainscreen
~~~~~~~~~~~~~~~~~~

A type that stores functions and properties of the Runescape main screen.
*)
type
  TRSMainscreen = record(TRSInterface)
    playerPoint: TPoint;
    playerBox: TBox;
  end;

(*
var mainscreen
~~~~~~~~~~~~~~

Variable that stores functions and properties of the Runescape mainscreen.

Example:

.. code-block:: pascal

    if (mainscreen.isPlayerAnimating()) then
      writeln('Player is doing something');
*)
var
  mainscreen: TRSMainscreen;

{*
TRSMainscreen.__init()
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TRSMainscreen.__init();

Initiates the mainscreen variable. Called at the end of this file.

.. note::

    - by Coh3n
    - Last updated: Mar. 10, 2013 by Coh3n

Example:

.. code-block:: pascal

    mainscreen.__init();
*}
{$IFNDEF CODEINSIGHT}
procedure TRSMainscreen.__init();
begin
  with self do
  begin
    name := 'RS Mainscreen';
    ID := ID_INTERFACE_MAINSCREEN;
    parentID := -1;
    static := true;
  end;
end;
{$ENDIF}

{*
TRSMainscreen.__setup
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TRSMainscreen.__setup();

Sets up the mainscreen's bounds based on where the actionbar is found.

.. note::

    - by Olly
    - Last updated: 24 November 2013 by Olly

Example:

.. code-block:: pascal

    mainscreen.__init();
*}
{$IFNDEF CODEINSIGHT}
procedure TRSMainscreen.__setup();
const
  PLAYER_BOX_WIDTH = 26;
  PLAYER_BOX_HEIGHT = 38;
begin
  self.setBounds([0, 0, gameTabs.tabArea.x1-1, actionBar.y1-1]);
  self.playerPoint := middleBox([1, 1, 574, 387]); // the whole 3d gamescreen
  self.playerBox := [self.playerPoint.x - PLAYER_BOX_WIDTH div 2, self.playerPoint.y - PLAYER_BOX_HEIGHT div 2,
                     self.playerPoint.x + PLAYER_BOX_WIDTH div 2, self.playerPoint.y + PLAYER_BOX_HEIGHT div 2];
end;
{$ENDIF}

(*
TRSMainscreen.setAngle
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TRSMainscreen.setAngle(angle: integer);

Sets the mainscreen at highest\lowest angle, dependant on constant passed.

.. note::

    - by Raymond, edit by Naum
    - Last Updated: 10 May 2013 by Coh3n

Example:

.. code-block:: pascal

    // make the camera the highest
    setAngle(MS_ANGLE_HIGH);
*)
procedure TRSMainscreen.setAngle(angle: integer);
begin
  if (angle = MS_ANGLE_NONE) then
    exit;

  keyDown((angle * 2) + 38);
  wait(1000 + random(300));
  keyUp((angle * 2) + 38);
  wait(300 + random(300));
end;

(*
TRSMainscreen.isPlayerAnimating
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSMainscreen.isPlayerAnimating(maxShift: integer = 100): boolean;

Returns true if the pixel shift around the player is less than 'maxShift'. The
box around the player is defined in "mainscreen.playerBox". Pixel shifts can
vary depending on what the player is wearing/holding. This function's default is
based off of a player wearing nothing, and having the mainscreen at about half
zoom.

.. note::

    - by Coh3n
    - Last Updated: 7 July 2014 by Coh3n

Example:

.. code-block:: pascal

    while (mainscreen.isPlayerAnimating()) do
    begin
      antiban();
      wait(50 + random(50));
    end;
*)
function TRSMainscreen.isPlayerAnimating(maxShift: integer = 300): boolean;
begin
  result := (getPixelShiftAverage(self.playerBox, 50, 250) >= maxShift);
end;

(*
TRSMainscreen.setZoom
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TRSMainscreen.setZoom(zoomout: boolean; scrolls: integer = 40);

Sets the mainscreen zoom in or out, dependant on boolean passed. Option to do it only
partial with scrolls integer

.. note::

    - by Ashaman88
    - Last Updated: 5 February 2014 by Ashaman88

Example:

.. code-block:: pascal

    mainscreen.setZoom(true);
*)
procedure TRSMainscreen.setZoom(zoomout: boolean; scrolls: integer = 40);
var
  b: TBox;
  p: TPoint;
begin
  b := self.getBounds();
  p := b.getRandomPoint();

  mouseScroll(p, scrolls + random(5), zoomout);
end;

(*
TRSMainscreen.filterPointsPlayer
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TRSMainscreen.filterPointsPlayer(var tpa: TPointArray);

Clears all the points in the TPointArray 'tpa' that fall within the players box.

Example:

.. code-block:: pascal

    mainScreen.filterPointsPlayer(tpa);
*)
procedure TRSMainscreen.filterPointsPlayer(var tpa: TPointArray);
var
  tmp: TPointArray;
begin
  tmp := TPAFromBox(self.playerBox);
  tpa := clearTPAFromTPA(tpa, tmp);
end;

(*
TRSMainscreen.findObject
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSMainscreen.findObject(var x, y: integer; cols, tols: TIntegerArray; colSettings: TColorSettings; sortFrom: TPoint; objWidth, objHeight, minCount: integer; mouseOverText: TStringArray; searchBox: TBox; mouseAction: integer = MOUSE_NONE): boolean;

A very general object finding function.  Will find and click an object in the specified box.
Will click ONLY the closest object to the player, no others that may be in the same area.
It is suggested to use this function on a very distint object.  In other words, use this
function only when there aren't similar colors to the object in the same area.

    * ix, iy: The coordinates of the object if found.
    * cols: The colors to be found.
    * tols: The tolerances on 'cols'.
    * colSettings: The color settings (i.e. color tolerance speed and modifiers). See lib/utilities/color.simba.
    * sortFrom: Sorts the TPA, starting with the point closest to this point.
    * objWidth: The width (in pixels) of the object you're trying to find.
    * objHeight: The height (in pixels) of the object you're trying to find.
    * minCount: The minimum number of colors to be found on a single object.
    * mouseOverText: The uptext of the object.
    * searchBox: The area to search in.
    * mouseAction: The action of the mouse. Default MOUSE_LEFT.

.. note::

    - by Wizzup?, Torrent Of Flame & Coh3n
    - Last Updated: 30 May 2013 by Coh3n

Example:

.. code-block:: pascal

    if (mainscreen.findObject(x, y, [123457, 897637], [5, 10], colorSetting(2, 0.02, 0.13), mainscreen.getCenterPoint(), 50, 25, 40, ['Tree'], mainscreen.getBounds(), MOUSE_RIGHT)) then
      writeln('Right-clicked object!');
*)
function TRSMainscreen.findObject(var ix, iy: integer; cols, tols: TIntegerArray; colSettings: TColorSettings; sortFrom: TPoint; objWidth, objHeight, minCount: integer; mouseOverText: TStringArray; searchBox: TBox; mouseAction: integer = MOUSE_LEFT): boolean;
var
  i, l: integer;
  myPoint: TPoint;
  aPoints: T2DPointArray;
  ATPA: T2DPointArray;
  TPA: TPointArray;
  cs: TColorSettings;
begin
  result := false;
  print('TRSMainscreen.findObject()', TDebug.HEADER);

  cs.retrieve();
  colSettings.apply();
  l := length(cols);

  setLength(ATPA, l);

  for i := 0 to (l - 1) do
    findColorsSpiralTolerance(ix, iy, ATPA[i], cols[i], searchBox, tols[i], colSettings);

  cs.apply();

  TPA := ATPA.merge();
  if (length(TPA) <= 0) then
  begin
    print('No colors found');
    print('TRSMainscreen.findObject(): False', TDebug.FOOTER);
    exit(false);
  end;

  print('Colors found: '+toStr(length(TPA)));

  aPoints := TPA.toATPA(objWidth, objHeight);
  aPoints.filterBetween(0, minCount); // removes objects that don't have enough colors
  print('Possible objects found: '+toStr(length(aPoints)));

  aPoints.sortFromFirstPoint(sortFrom);

  // loop through each possible object
  for i := 0 to high(aPoints) do
  begin
    myPoint := aPoints[i].getMiddle();
    mouse(myPoint.rand(randomRange(-5, 5)), MOUSE_MOVE);

    if (isMouseOverText(mouseOverText)) then
    begin
      getMousePos(ix, iy);
      mouse(point(ix, iy), mouseAction);

      print('Successfully mouse''d object');
      result := true;
      break;
    end;
  end;

  print('TRSMainscreen.findObject(): '+toStr(result), TDebug.FOOTER);
end;

(*
TRSMainscreen.findObject; overload;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSMainscreen.findObject(var ix, iy: integer; col, tol: integer; colSettings: TColorSettings; sortFrom: TPoint; objWidth, objHeight, minCount: integer; mouseOverText: TStringArray; mouseAction: integer = MOUSE_NONE): boolean; overload;

A very general object finding function.  Will find and mouse an object in the mainscreen.

    * ix, iy: The coordinates of the object if found.
    * col: The color to be found.
    * tol: The tolerance on 'col'.
    * colSettings: The color settings (i.e. color tolerance speed and modifiers). See lib/utilities/color.simba.
    * sortFrom: Sorts the TPA, starting with the point closest to this point.
    * objWidth: The width (in pixels) of the object you're trying to find.
    * objHeight: The height (in pixels) of the object you're trying to find.
    * minCount: The minimum number of colors to be found on a single object.
    * mouseOverText: The uptext of the object.
    * mouseAction: The action of the mouse. Default MOUSE_LEFT.

.. note::

    - by Wizzup? & Torrent Of Flame
    - Last Updated: 30 May 2013 by Coh3n

Example:

.. code-block:: pascal

    if (mainscreen.findObject(x, y, 123457, 10, colorSetting(2, 0.02, 0.13), mainscreen.getCenterPoint(), 50, 25, 40, ['ake'])) then
      writeln('Clicked object!');
*)
function TRSMainscreen.findObject(var ix, iy: integer; col, tol: integer; colSettings: TColorSettings; sortFrom: TPoint; objWidth, objHeight, minCount: integer; mouseOverText: TStringArray; mouseAction: integer = MOUSE_LEFT): boolean; overload;
begin
  result := self.findObject(ix, iy, [col], [tol], colSettings, sortFrom, objWidth, objHeight, minCount, mouseOverText, self.getBounds(), mouseAction);
end;

(*
TRSMainscreen.findObject; overload;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSMainscreen.findObject(var ix, iy: integer; col, tol: integer; mouseOverText: TStringArray; mouseAction: integer = MOUSE_LEFT): boolean; overload;

A very general object finding function.  Will find and mouse an object in the mainscreen.

    * ix, iy: The coordinates of the object if found.
    * col: The color to be found.
    * tol: The tolerance on 'col'.
    * mouseOverText: The uptext of the object.
    * mouseAction: The action of the mouse. Default MOUSE_LEFT.

.. note::

    - by Olly
    - Last Updated: 20 November by Olly

Example:

.. code-block:: pascal

    if (mainscreen.findObject(x, y, 123457, 10, ['ake'])) then
      writeln('Clicked object!');
*)
function TRSMainscreen.findObject(var ix, iy: integer; col, tol: integer; mouseOverText: TStringArray; mouseAction: integer = MOUSE_LEFT): boolean; overload;
begin
  result := self.findObject(ix, iy, col, tol, colorSetting(1), self.playerPoint, 15, 15, 2, mouseOverText, mouseAction);
end;

begin
  mainscreen.__init();
end;

{$f+}
