(*
ChooseOption
============

The text file holds functions and procedures that are used in the choose option
menu.

The source for this file can be found `here <https://github.com/SRL/SRL-6/blob/master/lib/interfaces/chooseoption.simba>`_.

*)

{$f-}

(*
type TOption
~~~~~~~~~~~~

A type that stores the bounds, and string of a option.
*)
type
  TOption = record
    bounds: TBox;
    str: string;
  end;

(*
type TRSChooseOption
~~~~~~~~~~~~~~~~~~~~

A type that stores the choose option interface properties.
*)
type
  TOptionArray = array of TOption;
  TRSChooseOption = type TRSInterface;

(*
var chooseOption
~~~~~~~~~~~~~~~~

Variable that stores functions and properties of the Runescape choose option menu.

Example:

.. code-block:: pascal

    if (chooseOption.select(['Mine rock')) then
      writeln('Mining a rock!');
*)
var
  chooseOption: TRSChooseOption;

(*
TRSChooseOption.isOpen
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSChooseOption.isOpen(): boolean;

Returns true if the ChooseOption menu is open, if open will also set the type's
bounds.

.. note::

    - by Olly
    - Last Modified: 16 February 2014 by Olly

Example:

.. code-block:: pascal

    if (chooseOption.isOpen()) then
      chooseOption.close();
*)
function TRSChooseOption.isOpen(): boolean;
const
  BORDER_COLORS = [197636, 3618615, 3748386];
  CORNER_COLOR = 2368548;
var
  tpa, tpaBorder: TPointArray;
  atpaBorder: T2DPointArray;
  i, len: integer;
  bounds: TBox;
begin
  result := false;

  freeze();

  for i := 0 to high(BORDER_COLORS) do
    if (findColors(tpa, BORDER_COLORS[i], getClientBounds())) then
      appendTPA(tpaBorder, tpa);

  unfreeze();

  if (length(tpaBorder) < 1) then
    exit();

  atpaBorder := clusterTPAEx(tpaBorder, 2, 2);
  sortATPASize(atpaBorder, true);
  len := length(atpaBorder);

  for i := 0 to (len - 1) do
  begin
    bounds := getTPABounds(atpaBorder[i]);

    if (distance(bounds.x1, bounds.y1, bounds.x2, bounds.y2) < 100) then
      continue();

    if (getColor(bounds.x1, bounds.y1 - 1) = CORNER_COLOR) and (getColor(bounds.x2, bounds.y1 - 1) = CORNER_COLOR) then
    begin
      self.setBounds([bounds.x1 + 1, bounds.y1 + 1, bounds.x2 - 1, bounds.y2 - 1]); // decrease size to remove borders
      exit(true);
    end;
  end;
end;

(*
TRSChooseOption.isOpen; overload
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSChooseOption.isOpen(waitTime: integer): boolean; overload;

Overloaded function. Accepts a extra parameter 'waitTime' which will wait upto
waitTime (in ms) for the menu to appear.

.. note::

    - by Olly
    - Last Modified: 16 February 2014 by Olly

Example:

.. code-block:: pascal

    if (chooseOption.isOpen()) then
      chooseOption.close();
*)
function TRSChooseOption.isOpen(waitTime: integer): boolean; overload;
var
  t: longWord;
begin
  t := (getSystemTime() + waitTime);
  result := false;

  while (not result) and (t >= getSystemTime()) do
  begin
    result := self.isOpen();
    wait(20 + random(50));
  end;
end;

(*
TRSChooseOption.close
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSChooseOption.close(): boolean;

Closes the chooseoption menu by moving the mouse off the menu, returns true if succesfull.

.. note::

    - by Olly
    - Last Modified: 16 February 2014 by Olly

Example:

.. code-block:: pascal

    if (chooseOption.isOpen()) then
      chooseOption.close();
*)
function TRSChooseOption.close(): boolean;
var
  left, wide: boolean;
  wid, hei: integer;
  p: TPoint;
  t: longWord;
begin
  result := false;

  if (not self.isOpen()) then
    exit(true);

  getClientDimensions(wid, hei);

  left := (self.x1 > abs(self.x2 - wid));
  wide := ((self.y2 - self.y1) > 450);

  if (left) then
    p.x := (self.x1 - randomRange(15, 65))
  else
    if (wide) then
      p.x := (self.x2 + 300 + randomRange(15, 65))
      else
        p.x := (self.x2 + randomRange(15, 65));

  p.y := (self.y1 + random((self.y2 - self.y1) + random(10)));

  mouse(p);

  t := (getSystemTime() + randomRange(2500, 3000));

  while (not result) and (t > getSystemTime()) do
  begin
    wait(20 + random(50));
    result := (not self.isOpen());
  end;

  print('TRSChooseOption.close(): result = '+lowercase(boolToStr(result)), TDebug.SUB);
end;

(*
TRSChooseOption.getOptions
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSChooseOption.getOptions(): TOptionArray;

Returns a TOptionArray of all the options

.. note::

    - by Olly
    - Last Modified: 16 February 2014 by Olly

Example:

.. code-block:: pascal

    if (chooseOption.isOpen()) then
      chooseOption.close();
*)
function TRSChooseOption.getOptions(): TOptionArray;
var
  bmp, wid, hei, i, oldTarget, t: integer;
  tpa: TPointArray;
begin
  if (not self.isOpen()) then
    exit();

  oldTarget := getImageTarget();
  bmp := bitmapFromClient(self.getBounds());

  thresholdAdaptiveBitmap(bmp, 0, 255, false, TM_MinMax, 0);

  getBitmapSize(bmp, wid, hei);
  setLength(result, (hei div 16));

  if (length(result) < 1) then
    exit();

  try
    setTargetBitmap(bmp);

    for i := 0 to high(result) do
    begin
      result[i].bounds := [0, (i * 16) + 1, wid - 1, min((i * 16) + 16, hei -1)];
      result[i].str := getTextAtEx(result[i].bounds, 0, 5, 5, clRed, 0, UpCharsEx);
      result[i].bounds.offset(point(self.x1, self.y1));  // offset so its back on the mainscreen
      result[i].bounds.shrink(1);
    end;
  except
    print('TRSChooseOption.getOptions(): Exception encountered', TDebug.ERROR);
  finally
    t := getImageTarget();
    setImageTarget(oldTarget);
    freeTarget(t);
    freeBitmap(bmp);
  end;
end;

(*
TRSChooseOption.optionsExist
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSChooseOption.optionsExist(options: TStringArray; matchPercent: extended = 1.00): boolean;

Returns true if any of the options exist.

.. note::

    - by Olly
    - Last Modified: 16 February 2014 by Olly

Example:

.. code-block:: pascal

    if chooseOption.optionsExist(['alk here']) then
      writeln('the option walk here is there!');
*)
function TRSChooseOption.optionsExist(options: TStringArray; matchPercent: extended = 1.00): boolean;
var
  optionArr: TOptionArray;
  i, j: integer;
begin
  result := false;

  if (not self.isOpen()) then
    exit();

  optionArr := self.getOptions();

  for i := 0 to high(optionArr) do
    for j := 0 to high(options) do
      if (pos(options[j], optionArr[i].str) > 0) then
      begin
        print('TRSChooseOption.optionsExist(): Succesfully found option "'+options[j]+'" in "'+optionArr[i].str+'"', TDebug.SUB);
        exit(true);
      end;
end;

{*
TRSChooseOption._select
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

function TRSChooseOption._select(txt: TStringArray; mouseAction: integer; aclose: boolean; matchPercent: extended; waitTime: integer): boolean;

  * txt - An array of text you want to find in any of the options.
  * mouseAction - What to do if we succesfully find a option (MOUSE_MOVE, MOUSE_LEFT, MOUSE_RIGHT, MOUSE_NONE).
  * aclose - Will we close the menu after we're done with it?
  * matchPercent - The min percentage that will we count as match (if using stringmatch) if not using stringmatch
                   and want the old the method of finding txt anywhere in the string set it as 1.00.
  * waitTime - how long will we wait for the chooseoptions menu to appear?.

.. note::

    - by Olly
    - Last Modified: 04 March 2014 by Coh3n

Example:

.. code-block:: pascal

    // to not use string match
    chooseOption._select(['alk', 'lk To', 'Walk'], MOUSE_LEFT, true, 1.00, 150);

    // to use string match
    chooseOption._select(['Walk To'], MOUSE_LEFT, true, 0.85, 150);
*}
function TRSChooseOption._select(txt: TStringArray; mouseAction: integer; aclose: boolean; matchPercent: extended; waitTime: integer): boolean;
var
  optionArr: TOptionArray;
  l, i, j: integer;
  s: TStringArray;
  a: extended;
  b: TBox;
begin
  result := false;

  print('TRSChooseOption._select():', TDebug.HEADER);

  if (not self.isOpen(waitTime)) then
  begin
    print('ChooseOption menu never appeared', TDebug.ERROR);
    print('TRSChooseOption.select() result = false', TDebug.FOOTER);
    exit();
  end;

  optionArr := self.getOptions();

  l := length(optionArr);

  if (l < 1) then
  begin
    print('Failed to find any options', TDebug.ERROR);
    print('TRSChooseOption.select() result = false', TDebug.FOOTER);

    if (aclose) then
      close();

    exit();
  end else
  begin
    // format the matches so we don't spam the debug box
    setLength(s, l);

    for i := 0 to (l -1) do
      s[i] := optionArr[i].str;

    print('Options found: ' + toStr(s));
  end;

  for i := 0 to high(optionArr) do
    for j := 0 to high(txt) do
    begin
      if (matchPercent = 1.00) then // not using stringmatch
        if (pos(txt[j], optionArr[i].str) > 0) then
        begin
          print('Found option "' + txt[j] + '" in "' + optionArr[i].str + '"');
          print('TRSChooseOption.select() result = true', TDebug.FOOTER);

          if (mouseAction <> MOUSE_NONE) then
            mouseBox(optionArr[i].bounds, mouseAction)
          else // if it's mouse none lets see if we need to close
            if (aclose) then
              self.close();

          exit(true);
        end else
          continue;

      // if we're here we are using string match
      a := stringMatch(optionArr[i].str, txt[j]);

      if (a >= matchPercent) then
      begin
        print('Found option "' + txt[j] + '" @ accuracy ' + floatToStr(a));
        print('TRSChooseOption.select() result = true', TDebug.FOOTER);

        if (mouseAction <> MOUSE_NONE) then
        begin
          b := optionArr[i].bounds;
          b.edit(2, 2, -2, -2); // shrink the box so there's no chance of clicking the wrong option
          mouseBox(b, mouseAction)
        end else // if it's mouse none lets see if we need to close
          if (aclose) then
            self.close();

        exit(true);
      end;
   end;

  // close the menu since we found no matches
  if (aclose) then
    close();

  print('Failed to find any text matches');
  print('TRSChooseOption._select() result = false', TDebug.FOOTER);
end;

(*
TRSChooseOption.select; overload
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSChooseOption.select(txt: TStringArray; waitTime: integer = 150): boolean; overload;

A overloaded function that will use the tradional method.

  * txt: The text we will look for in any of the options.
  * waitTime: How long we will wait for the chooseoption menu to appear, default set at 150ms.

.. note::

    - by Olly
    - Last Modified: 12 September 2013 by Olly

Example:

.. code-block:: pascal

    chooseOption.select(['Walk here', 'alk he']);
*)
function TRSChooseOption.select(txt: TStringArray; waitTime: integer = 250): boolean; overload;
begin
  result := self._select(txt, MOUSE_LEFT, true, 1.00, waitTime);
end;

(*
TRSChooseOption.select; overload
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSChooseOption.select(txt: TStringArray; matchPercent: extended; waitTime: integer = 150): boolean; overload;

A overloaded function that will use the "string matching" method.

   * txt: The txt will try and match against in any of the options.
   * matchPercent: The min percent that we will count a match.
   * waitTime: How long we will wait for the chooseoption menu to appear, default set at 150ms.

.. note::

    - by Olly
    - Last Modified: 12 September 2013 by Olly

Example:

.. code-block:: pascal

    chooseOption.select(['Walk here'], 0.80);
*)
function TRSChooseOption.select(txt: TStringArray; matchPercent: extended; waitTime: integer = 250): boolean; overload;
begin
  result := self._select(txt, MOUSE_LEFT, true, matchPercent, waitTime);
end;

(*
TRSChooseOption.debugOptions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

   procedure TRSChooseOption.debugOptions();

Debugs all the found options.

.. note::

    - by Olly
    - Last Modified: 11 Novemeber 2013 by Olly

Example:

.. code-block:: pascal

    chooseOption.debugOptions();
*)
procedure TRSChooseOption.debugOptions();
var
  i: integer;
  options: TOptionArray;
begin
  print('TRSChooseOption.debugOptions()', TDebug.HEADER);

  if (self.isOpen()) then
  begin
    options := self.getOptions();

    for i := 0 to high(options) do
      print(intToStr(i)+') '+options[i].str);
  end else
    print('Menu isn''t open, unable to debug options', TDebug.ERROR);

  print('TRSChooseOption.debugOptions()', TDebug.FOOTER);
end;

{*
Depreciated
~~~~~~~~~~~
  Depreciated type / function.
  Use TOption (type) and TRSChooseOption.getOptions().
*}

{$IFNDEF CODEINSIGHT}
type
  __TOption = record
    bounds: TBox;
    str: string;
  end;

  __TOptionArray = array of __TOption;

function TRSChooseOption.__getOptions(): __TOptionArray;
begin
  result := __TOptionArray(self.getOptions());
end;
{$ENDIF}

{$f+}
